/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.2' (BDS version 1.0.2095.0) */

#ifndef BLE_BAS_H__
#define BLE_BAS_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"



/**@brief Battery Service event type. */
typedef enum
{ 
    BLE_BAS_BATTERY_LEVEL_EVT_NOTIFICATION_ENABLED,  /**< Battery Level value notification enabled event. */
    BLE_BAS_BATTERY_LEVEL_EVT_NOTIFICATION_DISABLED, /**< Battery Level value notification disabled event. */
    BLE_BAS_BATTERY_LEVEL_EVT_CCCD_WRITE, /**< Battery Level CCCD write event. */
} ble_bas_evt_type_t;

// Forward declaration of the ble_bas_t type.
typedef struct ble_bas_s ble_bas_t;


typedef enum
{ 
    FORMAT_RESERVED_FOR_FUTURE_USE = 0, 
    FORMAT_BOOLEAN = 1, 
    FORMAT_UNSIGNED_2_BIT_INTEGER = 2, 
    FORMAT_UNSIGNED_4_BIT_INTEGER = 3, 
    FORMAT_UNSIGNED_8_BIT_INTEGER = 4, 
    FORMAT_UNSIGNED_12_BIT_INTEGER = 5, 
    FORMAT_UNSIGNED_16_BIT_INTEGER = 6, 
    FORMAT_UNSIGNED_24_BIT_INTEGER = 7, 
    FORMAT_UNSIGNED_32_BIT_INTEGER = 8, 
    FORMAT_UNSIGNED_48_BIT_INTEGER = 9, 
    FORMAT_UNSIGNED_64_BIT_INTEGER = 10, 
    FORMAT_UNSIGNED_128_BIT_INTEGER = 11, 
    FORMAT_SIGNED_8_BIT_INTEGER = 12, 
    FORMAT_SIGNED_12_BIT_INTEGER = 13, 
    FORMAT_SIGNED_16_BIT_INTEGER = 14, 
    FORMAT_SIGNED_24_BIT_INTEGER = 15, 
    FORMAT_SIGNED_32_BIT_INTEGER = 16, 
    FORMAT_SIGNED_48_BIT_INTEGER = 17, 
    FORMAT_SIGNED_64_BIT_INTEGER = 18, 
    FORMAT_SIGNED_128_BIT_INTEGER = 19, 
    FORMAT_IEEE_754_32_BIT_FLOATING_POINT = 20, 
    FORMAT_IEEE_754_64_BIT_FLOATING_POINT = 21, 
    FORMAT_IEEE_11073_16_BIT_SFLOAT = 22, 
    FORMAT_IEEE_11073_32_BIT_FLOAT = 23, 
    FORMAT_IEEE_20601_FORMAT = 24, 
    FORMAT_UTF_8_STRING = 25, 
    FORMAT_UTF_16_STRING = 26, 
    FORMAT_OPAQUE_STRUCTURE = 27, 
} enum_format_t;

typedef struct
{
    enum_format_t format; 
} bas_characteristic_presentation_format_format_t; 
typedef enum
{ 
    NAMESPACE_BLUETOOTH_SIG_ASSIGNED_NUMBERS = 1, 
} enum_namespace_t;

typedef struct
{
    enum_namespace_t namespace; 
} bas_characteristic_presentation_format_namespace_t; 


/**@brief Characteristic Presentation Format structure. */
typedef struct
{
    bas_characteristic_presentation_format_format_t format;
    int8_t exponent;
    uint16_t unit;
    bas_characteristic_presentation_format_namespace_t namespace;
    uint16_t description;
} ble_bas_characteristic_presentation_format_t;





/**@brief Battery Level structure. */
typedef struct
{
    uint8_t level;
    ble_bas_characteristic_presentation_format_t characteristic_presentation_format; 
} ble_bas_battery_level_t;

/**@brief Battery Service Service event. */
typedef struct
{
    ble_bas_evt_type_t evt_type;    /**< Type of event. */
    union {
        uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
    } params;
} ble_bas_evt_t;

/**@brief Battery Service Service event handler type. */
typedef void (*ble_bas_evt_handler_t) (ble_bas_t * p_bas, ble_bas_evt_t * p_evt);

/**@brief Battery Service Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
    ble_bas_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the Battery Service Service. */
    bool is_battery_level_notify_supported;    /**< TRUE if notification of Battery Level is supported. */
    ble_bas_battery_level_t ble_bas_battery_level_initial_value; /**< If not NULL, initial value of the Battery Level characteristic. */ 
} ble_bas_init_t;

/**@brief Battery Service Service structure. This contains various status information for the service.*/
struct ble_bas_s
{
    ble_bas_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the Battery Service Service. */
    uint16_t service_handle; /**< Handle of Battery Service Service (as provided by the BLE stack). */
    bool is_battery_level_notify_supported;    /**< TRUE if notification of Battery Level is supported. */
    ble_gatts_char_handles_t battery_level_handles; /**< Handles related to the Battery Level characteristic. */
    ble_gatts_char_handles_t characteristic_presentation_format_handles; /**< Handles related to the Characteristic Presentation Format descriptor. */
    uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the Battery Service.
 *
 * @param[out]  p_bas       Battery Service Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_bas_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_bas_init(ble_bas_t * p_bas, const ble_bas_init_t * p_bas_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_bas_on_ble_evt(ble_bas_t * p_bas, ble_evt_t * p_ble_evt);

/**@brief Function for setting the Battery Level.
 *
 * @details Sets a new value of the Battery Level characteristic. The new value will be sent
 *          to the client the next time the client reads the Battery Level characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_bas                 Battery Service Service structure.
 * @param[in]   p_battery_level  New Battery Level.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_bas_battery_level_set(ble_bas_t * p_bas, ble_bas_battery_level_t * p_battery_level);

/**@brief Function for sending the Battery Level.
 *
 * @details The application calls this function after having performed a battery level.
 *          The battery level data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_bas                    Battery Service Service structure.
 * @param[in]   p_battery_level               New battery level.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_bas_battery_level_send(ble_bas_t * p_bas, ble_bas_battery_level_t * p_battery_level);

/**@brief Function for setting the Characteristic Presentation Format.
 *
 * @details Sets a new value of the Characteristic Presentation Format descriptor. The new value will be sent
 *          to the client the next time the client reads the Characteristic Presentation Format descriptor.
 *          This function is only generated if the descriptor's Read property is not 'Excluded'.
 *
 * @param[in]   p_bas                 Battery Service Service structure.
 * @param[in]   p_characteristic_presentation_format  New Characteristic Presentation Format.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_bas_characteristic_presentation_format_set(ble_bas_t * p_bas, ble_bas_characteristic_presentation_format_t * p_characteristic_presentation_format);

#endif //_BLE_BAS_H__
